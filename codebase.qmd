---
title: "Codebase"
format: 
  html:
    page-layout: full
---

```{python}
#| label: Codebase
#| echo: false
#| output: asis
import subprocess

repo_url = "https://github.com/V-Sekai/v-sekai-game.git"
clone_dir = "v-sekai-game"  # or omit this argument to clone into a folder named after the repository
try:
    result = subprocess.run(
        ["git", "clone", repo_url, clone_dir], check=True, capture_output=True, text=True
    )
    print("Repository cloned successfully!")
    print("Output:", result.stdout)
except subprocess.CalledProcessError as error:
    print("Error: can't clone repository :", error.stderr)

import os
import re

results = []
regex_extends = r'\b\s*?extends\s+"?(.+?)"?\b'
pattern_extends = re.compile(regex_extends)

regex_classname = r'\b\s*?class\s+(.+?):' # WARNING: nested classes not supported
pattern_classname = re.compile(regex_classname)

for root, _, files in os.walk(clone_dir):
    for file in files:
        if file.endswith(".gd"):
            file_path = os.path.join(root, file)
            with open(file_path, "r", encoding="utf-8") as f:
                line_number = 0
                class_counter = 0
                class_name = ""
                for line in f:
                    line_number += 1
                    if line.strip() == "":
                        continue
                    indent = len(line) - len(line.lstrip())
                    if indent == 0: # reset
                        class_counter = 0
                        class_name = ""

                    match_parent = pattern_extends.search(line)
                    match_classname = pattern_classname.search(line)
                    if match_classname:
                        # print("\nmatched classname")
                        class_counter += 1
                        class_name = match_classname.group(1)
                        continue
                    elif match_parent:
                        parent_name = match_parent.group(1)
                        if class_counter == 0:
                            # print("\nroot class")
                            class_name = file_path
                        #else:
                        #    class_name = class_name
                       
                        # print(f"\nMatch in {file_path}, line {line_number}: {class_name} count {class_counter}")
                        results.append({
                            "id": class_name,
                            "parent": parent_name,
                            "path": file_path,
                            "line": line_number,
                        })

print(results)

def ensure_root_parents_exist(entries, default_parent="Root"):
    id_set = {entry["id"] for entry in entries if entry.get("id")}
    missing_parents = {entry["parent"] for entry in entries 
                       if entry.get("parent") and entry["parent"] not in id_set}
    for parent in missing_parents:
        entries.append({
            "id": parent,
            "parent": default_parent,
            "type": default_parent
        })
    entries.append({
        "id": default_parent,
        "parent": None,
        "type": default_parent
# f"root_{default_parent}"
    })
    
    return entries

results = ensure_root_parents_exist(results, "Godot")

import networkx as nx
from ipycytoscape import CytoscapeWidget

# G.add_edge("Dog", "Leg", relationship="composition")

data = results
F = nx.DiGraph()
for item in data:
    F.add_node(item["id"], label=item["id"], type=item.get("type", ""), path=item.get("path", ""), line=item.get("line", 0))
    if item.get("parent") is not None:
        F.add_edge(item["parent"], item["id"], relationship="inheritance")

cyto = CytoscapeWidget()

# Convert NetworkX graph for ipycytoscape.
cyto.graph.add_graph_from_networkx(F, directed=True)

styles = [
    {
        'selector': 'node',
        'style': {
            'label': 'data(label)',
            'shape': 'roundrectangle',
            'text-overflow': 'ellipsis',
            'text-max-width': '80px', 
            'background-color': '#BFD7B5',
            'border-color': 'black',
            'border-width': 1,
            'width': 120,
            'height': 40,
            'text-valign': 'center',
            'text-halign': 'center',
            'font-size': '10px'
        }
    },
    {
        'selector': 'node[type = "Godot"]',
        'style': {
            'label': 'data(label)',
            'shape': 'ellipse',
            'text-overflow': 'ellipsis',
            'text-max-width': '80px', 
            'background-color': '#D9544D',
            'border-color': 'black',
            'border-width': 2,
            'width': 40,
            'height': 40,
            'text-valign': 'center',
            'text-halign': 'center',
            'font-weight': 'bold',
            'font-size': '10px'
        }
    },
    {
        'selector': 'edge[relationship = "inheritance"]',
        'style': {
            'line-color': '#0074D9',
            'target-arrow-shape': 'triangle',
            'target-arrow-color': '#0074D9',
            'curve-style': 'bezier'
        }
    },
    {
        'selector': 'edge[relationship = "composition"]',
        'style': {
            'line-color': '#FF4136',
            'target-arrow-shape': 'diamond',
            'target-arrow-color': '#FF4136',
            'curve-style': 'bezier'
        }
    }
]

cyto.set_style(styles)
# cyto.set_layout(name='dagre')
#cyto.set_layout(
#    name='breadthfirst',
#    roots=[node for node in F.nodes() if F.in_degree(node) == 0],
#    spacingFactor=1.2
#)
#cyto.set_layout(name='concentric', spacingFactor=1.0)
#cyto.set_layout(name='cose', animate=True)
cyto.set_layout(
    name='cose',
    animate=False,
    idealEdgeLength=100,
    nodeRepulsion=4000,
    avoidOverlap=True 
)

# Display
cyto
```
